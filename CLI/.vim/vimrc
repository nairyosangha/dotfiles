" VIM CONFIG
set nocompatible
set encoding=utf-8
set backspace=eol,start
filetype on
" filetype indent on
set runtimepath+=/usr/share/vim/
syntax on

" Will try this again once coc supports storing the coc-settings file
" somewhere else besides ~/.vim
"
" set undodir=$XDG_CACHE_HOME/vim/undo
" set directory=$XDG_CACHE_HOME/vim/swap
" set backupdir=$XDG_CACHE_HOME/vim/backup
" set viewdir=$XDG_CACHE_HOME/vim/view
set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
" set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/autoload

call plug#begin("~/.vim/plugged")
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	Plug 'scrooloose/nerdtree'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-fugitive'
	Plug 'bling/vim-airline'
	Plug 'vim-scripts/c.vim'
	Plug 'junegunn/fzf'
	Plug 'junegunn/goyo.vim'
	Plug 'airblade/vim-gitgutter'
	Plug 'kovetskiy/sxhkd-vim'
	" colorschemes
	Plug 'haishanh/night-owl.vim'
	Plug 'Rigellute/shades-of-purple.vim'
	Plug 'dunstontc/vim-vscode-theme'
	Plug 'morhetz/gruvbox'
call plug#end()

" KEY REMAPPINGS
inoremap jj <ESC>
map <C-n> :NERDTreeToggle<CR>
execute "set <M-n>=\en"
nnoremap <M-n> :NERDTreeRefreshRoot<CR>
nnoremap <Leader>o :FZF --bind=alt-k:up,alt-j:down<CR>
" use diff tool to show changes between current version and saved version
nnoremap <Leader>d :w !diff - %<CR>

colorscheme koehler
colorscheme gruvbox
set wildmenu
set mouse=a
set hlsearch " highlight matched search pattern
set incsearch
set ic " ignore case in matches
set showmatch
set ruler
set rnu
set nu
set spelllang=en_us,nl

" FOLDING / TABS
set foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=10
set autoindent
set noexpandtab
set tabstop=4
set shiftwidth=4

let g:solarized_termcolor=256

" SETTINGS FOR SPECIFIC FILETYPES
autocmd FileType yaml setlocal tabstop=2
autocmd FileType html setlocal tabstop=2
autocmd FileType html setlocal shiftwidth=2
autocmd FileType html setlocal foldmethod=indent
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal foldmethod=indent
autocmd FileType plaintex,tex setlocal spell
autocmd FileType markdown setlocal spell
autocmd FileType lua setlocal foldmethod=indent

hi CursorLine cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white 
nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>


" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Add argument (can be negative, default 1) to global variable i.
" Return value of i before the change.
" see: https://vim.fandom.com/wiki/Making_a_list_of_numbers
function Inc(...)
  let result = g:i
  let g:i += a:0 > 0 ? a:1 : 1
  return result
endfunction

" Press Space to turn off highlighting and clear any message already displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
